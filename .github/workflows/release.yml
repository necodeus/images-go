name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build_and_release:
    name: Build and Upload Artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64, 386]
        include:
          - goos: linux
            goarch: amd64
            create_release: true
          - goos: linux
            goarch: 386
            create_release: false
          - goos: windows
            goarch: amd64
            create_release: false
          - goos: windows
            goarch: 386
            create_release: false
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21.12"

      - name: Check out code
        uses: actions/checkout@v3

      - name: Build binary
        run: |
          mkdir -p build
          binary_name="myapp-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ./build/${binary_name}
        env:
          CGO_ENABLED: 0

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: myapp-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./build/myapp-${{ matrix.goos }}-${{ matrix.goarch }}*

  release:
    name: Create and Upload Release Assets
    runs-on: ubuntu-latest
    needs: build_and_release
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Linux amd64 asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/myapp-linux-amd64
          asset_name: myapp-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Linux 386 asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/myapp-linux-386
          asset_name: myapp-linux-386
          asset_content_type: application/octet-stream

      - name: Upload Windows amd64 asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/myapp-windows-amd64.exe
          asset_name: myapp-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows 386 asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/myapp-windows-386.exe
          asset_name: myapp-windows-386.exe
          asset_content_type: application/octet-stream
