name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build and Upload Artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64, 386]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21.12"

      - name: Check out code
        uses: actions/checkout@v3

      - name: Build binary
        run: |
          mkdir -p build
          binary_name="myapp-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ./build/${binary_name}
        env:
          CGO_ENABLED: 0

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: myapp-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./build/myapp-${{ matrix.goos }}-${{ matrix.goarch }}*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  set-output:
    name: Set output for matrix
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./build

      - name: List files
        id: list_files
        run: |
          files=$(ls ./build)
          file_list=$(echo "$files" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "::set-output name=files::$file_list"

  upload-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: set-output
    strategy:
      matrix:
        file: ${{ fromJSON(needs.set-output.outputs.files) }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./build

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ needs.set-output.outputs.create_release.outputs.upload_url }}
          asset_path: ./build/${{ matrix.file }}
          asset_name: ${{ matrix.file }}
          asset_content_type: application/octet-stream
