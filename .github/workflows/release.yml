name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, 386]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21.12"

      - name: Check out code
        uses: actions/checkout@v3

      - name: Build binary
        run: |
          mkdir -p build/${{ matrix.goos }}-${{ matrix.goarch }}
          go build -o ./build/${{ matrix.goos }}-${{ matrix.goarch }}/app
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      - name: Create Release
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: ${{ always() }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/${{ matrix.goos }}-${{ matrix.goarch }}/app
          asset_name: build-${{ matrix.goos }}-${{ matrix.goarch }}-${{ github.run_number }}
          asset_content_type: application/octet-stream
