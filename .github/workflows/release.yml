name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build and Upload Artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64, 386]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21.12"

      - name: Check out code
        uses: actions/checkout@v3

      - name: Build binary
        run: |
          mkdir -p build
          binary_name="myapp-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ./build/${binary_name}
        env:
          CGO_ENABLED: 0

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: myapp-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./build/myapp-${{ matrix.goos }}-${{ matrix.goarch }}*

  release:
    name: Create Release and Upload Assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for file in ./build/*; do
            filename=$(basename "$file")
            gh_token="${{ secrets.PAT }}"
            upload_url="${{ steps.create_release.outputs.upload_url }}"
            echo "::set-output name=asset_path::$file"
            echo "::set-output name=asset_name::$filename"
            echo "::set-output name=upload_url::$upload_url"
            echo "::set-output name=gh_token::$gh_token"
          done
        id: set_output_vars

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ steps.set_output_vars.outputs.upload_url }}
          asset_path: ${{ steps.set_output_vars.outputs.asset_path }}
          asset_name: ${{ steps.set_output_vars.outputs.asset_name }}
          asset_content_type: application/octet-stream
