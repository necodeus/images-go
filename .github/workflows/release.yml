name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build and Upload Artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64, 386]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21.12"

      - name: Check out code
        uses: actions/checkout@v3

      - name: Build binary
        run: |
          mkdir -p build
          binary_name="myapp-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ./build/${binary_name}
        env:
          CGO_ENABLED: 0

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: myapp-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./build/myapp-${{ matrix.goos }}-${{ matrix.goarch }}*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Set files environment variable
        id: set_files
        run: |
          files=$(ls ./build)
          for file in $files; do
            echo "UPLOAD_FILE_$file=./build/$file" >> $GITHUB_ENV
          done

  upload-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./build

      - name: Upload each file
        run: |
          for var in $(env | grep '^UPLOAD_FILE_' | cut -d= -f1); do
            file_path=$(printenv $var)
            file_name=$(basename $file_path)
            echo "Uploading $file_name..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.PAT }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file_path" \
              "${{ steps.create_release.outputs.upload_url }}&name=$file_name"
          done
