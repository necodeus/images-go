name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows]
        arch: [amd64, arm64]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21.12"

      - name: Build
        run: |
          mkdir -p build
          CGO_ENABLED=0 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o ./build/images-${{ matrix.os }}-${{ matrix.arch }}
          cp .env.example ./build/.env
          cp -r errors ./build/errors
          cp init.sql ./build/init.sql

      - name: Create tar archive
        run: |
          tar -czvf ./build/images-${{ matrix.os }}-${{ matrix.arch }}.tar.gz -C ./build images-${{ matrix.os }}-${{ matrix.arch }} .env errors init.sql

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: images-${{ matrix.os }}-${{ matrix.arch }}
          path: ./build/images-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  create_release:
    runs-on: ubuntu-latest
    needs: build_and_release
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create Release
        id: create_release
        run: |
          response=$(curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{\"tag_name\": \"${GITHUB_REF_NAME}\", \"name\": \"Release ${GITHUB_REF_NAME}\", \"draft\": false, \"prerelease\": false}")
          echo "$response"
          RELEASE_ID=$(echo "$response" | jq -r '.id')
          echo "::set-output name=release_id::$RELEASE_ID"

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: images-linux-amd64
          path: ./build/
        if: matrix.os == 'linux' && matrix.arch == 'amd64'

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: images-linux-arm64
          path: ./build/
        if: matrix.os == 'linux' && matrix.arch == 'arm64'

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: images-windows-amd64
          path: ./build/
        if: matrix.os == 'windows' && matrix.arch == 'amd64'

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: images-windows-arm64
          path: ./build/
        if: matrix.os == 'windows' && matrix.arch == 'arm64'

      - name: Upload Release
        run: |
          for file in ./build/*.tar.gz; do
            curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.PAT }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @$file \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.release_id }}/assets?name=$(basename $file)"
          done
